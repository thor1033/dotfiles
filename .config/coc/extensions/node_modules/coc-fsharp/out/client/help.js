'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const fsac_1 = __importDefault(require("./fsac"));
class Help {
    static getHelp() {
        return __awaiter(this, void 0, void 0, function* () {
            var helpKey = yield fsac_1.default.f1help();
            if (helpKey == null) {
                return;
            }
            helpKey = helpKey.replace("#ctor", "-ctor").replace('`', '-');
            let uri = coc_nvim_1.Uri.parse(`https://docs.microsoft.com/en-us/dotnet/api/${helpKey}`);
            coc_nvim_1.workspace.openResource(uri.toString());
        });
    }
    static activate(context) {
        return __awaiter(this, void 0, void 0, function* () {
            // Register commands
            context.subscriptions.push(coc_nvim_1.commands.registerCommand('fsharp.fsdn', () => __awaiter(this, void 0, void 0, function* () {
                coc_nvim_1.workspace.showMessage("Not implemented...", "error");
            })), coc_nvim_1.commands.registerCommand('fsharp.f1Help', this.getHelp));
        });
    }
}
exports.default = Help;
//# sourceMappingURL=help.js.map