'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const coc_utils_1 = require("coc-utils");
class Repl {
    static registerREPL(context, title) {
        let replProvider = new coc_utils_1.REPLProvider({
            title: title,
            command: "dotnet",
            args: ['fsi', '--readline+', '--utf8output', '--nologo'],
            commit: ';;',
            filetype: 'fsharp'
        });
        let cmdEvalLine = coc_nvim_1.commands.registerCommand("fsharp.evaluateLine", () => __awaiter(this, void 0, void 0, function* () { return yield replProvider.eval('n'); }));
        let cmdEvalSelection = coc_nvim_1.commands.registerCommand("fsharp.evaluateSelection", () => __awaiter(this, void 0, void 0, function* () { return yield replProvider.eval('v'); }));
        let cmdExecFile = coc_nvim_1.commands.registerCommand("fsharp.run", (...args) => __awaiter(this, void 0, void 0, function* () {
            let root = coc_nvim_1.workspace.rootPath;
            let argStrs = args
                ? args.map(x => `${x}`)
                : [];
            let term = yield coc_nvim_1.workspace.createTerminal({
                name: `FSI`,
                shellPath: "dotnet",
                cwd: root,
                shellArgs: ['run'].concat(argStrs)
            });
            // switch to the terminal and steal focus
            term.show(false);
        }));
        // Push the disposable to the context's subscriptions so that the 
        // client can be deactivated on extension deactivation
        // TODO push the repl provider
        context.subscriptions.push(cmdExecFile, cmdEvalLine, cmdEvalSelection);
    }
    static activate(context) {
        return __awaiter(this, void 0, void 0, function* () {
            this.registerREPL(context, "FSI");
        });
    }
}
exports.default = Repl;
//# sourceMappingURL=repl.js.map